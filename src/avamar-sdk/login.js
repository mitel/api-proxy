import rest from 'restling';import api, { errorCallback } from './apiConfig';/** * Async REST call for the /rest-api/login endpoint * This call is mandatory for initializing a session with the REST server. * * @returns {Promise} A JavaScript Promise object that may eventually resolve into a  * an object with the following keys: *  - authToken: an authentication token used for all the subsequent REST API calls *  - serviceProviderId: each REST server is associated with a Service Provider entity. *  the login call will give you the id of this entity. *  - data: the raw result data *  - response: the raw JSON response from the server * If an error occurs the Promise will reject with an Error object */export function login(usr = api.restServerCredentials.username, pass = api.restServerCredentials.password) {  const _url = 'https://' + api.restServerHost + ':' + api.restServerPort + '/rest-api/login';  const _requestOptions = {    headers: { ...api.httpHeaders},    username: usr,    password: pass,    timeout: 3000,  };     // console.log(_requestOptions.password);  return new Promise((resolve, reject) => {    rest.post(_url, _requestOptions).then(result => {      // console.log(result.response.headers['x-concerto-authorization']);      return resolve({        authToken: result.response.headers['x-concerto-authorization'],        serviceProviderId: result.data.accessPoint[0].id,        data: result.data,        response: result.response,       });    }, error => {      console.log(JSON.stringify(error));      return reject(error);    });    });}// an ES7 version of the same functionexport async function loginES7() {  const _url = 'https://' + api.restServerHost + ':' + api.restServerPort + '/rest-api/login';  const _requestOptions = {    headers: { ...api.httpHeaders},    username: api.restServerCredentials.username,    password: api.restServerCredentials.password,  };   try {    const prom = await rest.post(_url, _requestOptions);     return {      authToken: prom.response.headers['x-concerto-authorization'],      serviceProviderId: prom.data.accessPoint[0].id,      data: prom.data,      response: prom.response,     };  } catch (err) {    errorCallback(err);  }}export function logout(authToken) {  const _url = 'https://' + api.restServerHost + ':' + api.restServerPort + '/rest-api/logout';  const _requestOptions = {    headers: {...api.httpHeaders, 'x-concerto-authorization': authToken },  };  return new Promise((resolve, reject) => {    rest.post(_url, _requestOptions).then(result => {      return resolve({        data: result.data,        response: result.response,       });    }, error => {      // console.log(error);      return reject(error);    });    });}